//
//  SwiftyResponseObjectSerializable.swift
//  Holler
//
//  Created by Phong Le on 26/12/15.
//  Copyright Â© 2015 Rainmaker-labs. All rights reserved.
//

import Foundation
import Alamofire
import SwiftyJSON

public struct RMLError {
    /// The domain used for creating all RML errors.
    public static let RMLDomain = "com.rainmakerlabs.error"
    
    /// The custom error codes generated by RML.
    public enum RMLCode: Int {
        case PhoneFailed                    = 4001
        case EmailFailed                    = 4002
        case InterestFailed                    = 4003
        case UnknowFailed                   = 5000
    }

    
    /**
     Creates an `NSError` with the given error code and failure reason.
     
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     
     - returns: An `NSError` with the given error code and failure reason.
     */
    public static func errorWithRMLCode(code: RMLCode, failureReason: String) -> NSError {
        return errorWithRMLCode(code.rawValue, failureReason: failureReason)
    }
    
    
    
    /**
     Creates an `NSError` with the given error code and failure reason.
     
     - parameter code:          The error code.
     - parameter failureReason: The failure reason.
     
     - returns: An `NSError` with the given error code and failure reason.
     */
    public static func errorWithRMLCode(code: Int, failureReason: String) -> NSError {
        let userInfo = [NSLocalizedDescriptionKey: failureReason]
        return NSError(domain: RMLDomain, code: code, userInfo: userInfo)
    }
}

public protocol ResponseJSONObjectSerializable {
    init?(json: SwiftyJSON.JSON)
}

public protocol ResponseCollectionSerializable {
    static func collection(representation: [JSON]) -> [Self]
    static func collection(representation: [String: JSON]) -> [Self]
}

extension Alamofire.Request {
    
    /**
     Handle object data from APIs result to determine AnyObject value
     
     - parameter completionHandler: Response<T, NSError> -> Void
     
     - returns: Self
     */
    public func responseObject<T: ResponseJSONObjectSerializable>(completionHandler: Response<T, NSError> -> Void) -> Self {
        let responseSerializer = ResponseSerializer<T, NSError> { request, response, data, error in
            guard error == nil else {
                return .Failure(error!)
            }
            
            guard let responseData = data else {
                let failureReason = "Data could not be serialized. Input data was nil."
                let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason)
                return .Failure(error)
            }
            
            let JSONResponseSerializer = Request.JSONResponseSerializer(options: .AllowFragments)
            let result = JSONResponseSerializer.serializeResponse(request, response, responseData, error)
            
            if result.isSuccess {
                if let value = result.value {
                    let json = JSON(value)
                    if json["status_code"].intValue == 400 {
                        if let errArray = json["detail"]["phone"].array {
                            let error = RMLError.errorWithRMLCode(.PhoneFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else if let errArray = json["detail"]["email"].array {
                            let error = RMLError.errorWithRMLCode(.EmailFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else if let errArray = json["detail"]["non_field_errors"].array {
                            let error = RMLError.errorWithRMLCode(.EmailFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else{
                            let error = RMLError.errorWithRMLCode(.UnknowFailed, failureReason: "Unknown failure")
                            return .Failure(error)
                        }
                    }else{
                        if let newObject = T(json: json) {
                            return .Success(newObject)
                        }
                    }
                    
                    
                    
                }
            }
            
            let error = Error.errorWithCode(.JSONSerializationFailed, failureReason: "JSON could not be converted to object")
            return .Failure(error)
        }
        
        return response(responseSerializer: responseSerializer,
            completionHandler: completionHandler)
    }

    /**
     Handle array of object data from APIs result to determine array value
     
     - parameter completionHandler: Response<[T], NSError> -> Void)
     
     - returns: Self
     */
    public func responseCollection<T: ResponseCollectionSerializable>(completionHandler: Response<[T], NSError> -> Void) -> Self {
        let responseSerializer = ResponseSerializer<[T], NSError> { request, response, data, error in
            guard error == nil else {
                return .Failure(error!)
            }
            guard let responseData = data else {
                let failureReason = "Data could not be serialized. Input data was nil."
                let error = Error.errorWithCode(.DataSerializationFailed, failureReason: failureReason)
                return .Failure(error)
            }
            
            let JSONResponseSerializer = Request.JSONResponseSerializer(options: .AllowFragments)
            let result = JSONResponseSerializer.serializeResponse(request, response, responseData, error)
            
            if result.isSuccess {
                if let value = result.value {
                    let json = JSON(value)
                    print(json)
                    if json["status_code"].intValue == 400 {
                        if let errArray = json["detail"]["phone"].array {
                            let error = RMLError.errorWithRMLCode(.PhoneFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else if let errArray = json["detail"]["email"].array {
                            let error = RMLError.errorWithRMLCode(.EmailFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else if let errArray = json["detail"]["non_field_errors"].array {
                            let error = RMLError.errorWithRMLCode(.EmailFailed, failureReason: errArray[errArray.count-1].string!)
                            return .Failure(error)
                        }else{
                            let error = RMLError.errorWithRMLCode(.UnknowFailed, failureReason: "Unknown failure")
                            return .Failure(error)
                        }
                        
                    }else if json["status_code"].intValue == 403 {
                        if let errormsg = json["detail"].string{
                            let error = RMLError.errorWithRMLCode(.InterestFailed, failureReason: errormsg)
                            return .Failure(error)
                        }
                        
                    }else {
                        if let jsonArray = json.array {
                            //print(json.array)
                            return .Success(T.collection(jsonArray))
                        }else if let jsonDic = json.dictionary {
                            return .Success(T.collection(jsonDic))
                        }
                    }
                    
                }
            }
            
            let error = Error.errorWithCode(.JSONSerializationFailed, failureReason: "JSON could not be converted to object")
            return .Failure(error)
        }
        
        return response(responseSerializer: responseSerializer, completionHandler: completionHandler)
    }
}
